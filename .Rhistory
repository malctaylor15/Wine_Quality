empirical_tail <- quantile(Sn_MC_samples, quantiles)
log_emp_tail <- 1-log(empirical_tail)
# Normal Approximation
Sn_mean <- mean(Sn_MC_samples)
Sn_sd <- sd(Sn_MC_samples)
norm_tail_approx <- qnorm(quantiles, Sn_mean, Sn_sd)
log_norm_tail <- 1-log(norm_tail_approx)
install.packages("nlesqslv")
install.packages("nleqslv")
?nleslv
?nleqslv
library(nleqslv)
?nleqslv
EX <- mean(Sn_MC_samples) # E[X]
EX2 <- mean(Sn_MC_samples^2) # E[X^2]
EX3 <- mean(Sn_MC_samples^3) # E[X^3]
# Equations
shift_gamma <- function (k, alpha, beta) {
y <- numeric(3)
y[1] <- k + alpha/beta - lmabda * EX
y[2] <- alpha/beta^2 - lambda * EX2
y[3] <- 2/sqrt(alpha) - EX3/sqrt(lambda*EX2^3)
y
}
xstart<- c(1,1,3)
nleqslv(xstart, shift_gamma)
shift_gamma <- function (x) {
k <- x[1]
alpha <- x[2]
beta <- x[3]
y <- numeric(3)
y[1] <- k + alpha/beta - lmabda * EX
y[2] <- alpha/beta^2 - lambda * EX2
y[3] <- 2/sqrt(alpha) - EX3/sqrt(lambda*EX2^3)
y
}
# Equations
shift_gamma <- function (x) {
k <- x[1]
alpha <- x[2]
beta <- x[3]
y <- numeric(3)
y[1] <- k + alpha/beta - lmabda * EX
y[2] <- alpha/beta^2 - lambda * EX2
y[3] <- 2/sqrt(alpha) - EX3/sqrt(lambda*EX2^3)
y
}
xstart<- c(1,1,3)
nleqslv(xstart, shift_gamma)
shift_gamma <- function (x) {
k <- x[1]
alpha <- x[2]
beta <- x[3]
y <- numeric(3)
y[1] <- k + alpha/beta - lambda * EX
y[2] <- alpha/beta^2 - lambda * EX2
y[3] <- 2/sqrt(alpha) - EX3/sqrt(lambda*EX2^3)
y
}
xstart<- c(1,1,3)
nleqslv(xstart, shift_gamma)
library(MASS)
?fitdistr
fitdistr(Sn_MC_samples, "gamma")
?rgamma
rgamma(10000, shape = 85.593394392 , rate =  0.715389909)
rgams <- rgamma(10000, shape = 85.593394392 , rate =  0.715389909)
hist(rgams)
hist(rgams, breaks = 50)
makeHist(Sn_MC_samples)
?dgamma
fits <- fitdistr(Sn_MC_samples, "gamma")
fit2[1]
fits[1]
fits[1,1]
fits[1][1]
makeHist <- function(x, color = "blue", title = "Histogram"){
h<-hist(x,breaks = 100, main=title)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit2 <- dgamma(xfit, shape = 85.5933944, rate  =0.7153899)
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col=color, lwd=2)
lines(xfit, yfit2, col = "red", lwd =2)
}
makeHist(Sn_MC_samples)
h<-hist(x,breaks = 100, probs = T,  main=title)
makeHist <- function(x, color = "blue", title = "Histogram"){
h<-hist(x,breaks = 100, probs = T,  main=title)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit2 <- dgamma(xfit, shape = 85.5933944, rate  =0.7153899)
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col=color, lwd=2)
lines(xfit, yfit2, col = "red", lwd =2)
}
makeHist(Sn_MC_samples)
?hist
# Plot the distribution with a normal density overlaid
makeHist <- function(x, color = "blue", title = "Histogram"){
h<-hist(x,breaks = 100, freq = T,  main=title)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit2 <- dgamma(xfit, shape = 85.5933944, rate  =0.7153899)
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col=color, lwd=2)
lines(xfit, yfit2, col = "red", lwd =2)
}
makeHist(Sn_MC_samples)
makeHist <- function(x, color = "blue", title = "Histogram"){
h<-hist(x,breaks = 100, denity= TRUE ,main=title)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit2 <- dgamma(xfit, shape = 85.5933944, rate  =0.7153899)
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col=color, lwd=2)
lines(xfit, yfit2, col = "red", lwd =2)
}
makeHist(Sn_MC_samples)
makeHist <- function(x, color = "blue", title = "Histogram"){
h<-hist(x,breaks = 100, density= TRUE ,main=title)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit2 <- dgamma(xfit, shape = 85.5933944, rate  =0.7153899)
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col=color, lwd=2)
lines(xfit, yfit2, col = "red", lwd =2)
}
makeHist(Sn_MC_samples)
makeHist <- function(x, color = "blue", title = "Histogram"){
h<-hist(x,breaks = 100, density= TRUE ,main=title)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit2 <- dgamma(xfit, shape = 85.5933944, rate  =0.7153899)
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col=color, lwd=2)
lines(xfit, yfit2, col = "red", lwd =2)
}
makeHist(Sn_MC_samples)
makeHist <- function(x, color = "blue", title = "Histogram"){
h<-hist(x,breaks = 100 ,main=title)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col=color, lwd=2)
}
makeHist(Sn_MC_samples)
EX <- mean(Sn_MC_samples) # E[X]
EX2 <- mean(Sn_MC_samples^2) # E[X^2]
EX3 <- mean(Sn_MC_samples^3) # E[X^3]
# Equations
shift_gamma <- function (x) {
k <- x[1]
alpha <- x[2]
beta <- x[3]
y <- numeric(3)
y[1] <- k + alpha/beta - lambda * EX
y[2] <- alpha/beta^2 - lambda * EX2
y[3] <- 2/sqrt(alpha) - EX3/sqrt(lambda*EX2^3)
y
}
xstart<- c(-30,85,0.5)
nleqslv(xstart, shift_gamma)
nleqslv(xstart, shift_gamma, method = "Newton")
nleqslv(xstart, shift_gamma, method = "Newton", control = list(allowSingular = TRUE))
shifted_gamma(c(3,4,5))
shift_gamma(c(3,4,5))
g,h,j <- xstart
fits
library(MASS)
fitdistr(Sn_MC_samples)
fitdistr(Sn_MC_samples, "gamma")
r <- fitdistr(Sn_MC_samples, "gamma")
r$shape
r[1]
r[1]$shape
r[1][1]
names(r[1])
names(r[1]$estimate)
r[1]$estimate[1]
gamma_params <- fitdistr(Sn_MC_samples, "gamma")
r$estimate
r$estimate$rate
r$estimate$shaoe
r$estimate$shape
r$estimate[1]
gamma_params <- fitdistr(Sn_MC_samples, "gamma")
gamma_shape <- gamma_params$estimate[1]
gamma_rate <- gamma_params$estimate[2]
qgamma
?qgamma
gamma_tail_approx <- qgamma(quantiles,shape = gamma_shape, rate = gamma_rate )
log_gamma_tail <- 1- log(gamma_tail_approx)
# Plot on log log scale
plot(quantiles,log_emp_tail, type = 'l', col = 'red', lwd = 3)
lines(quantiles, log_norm_tail, type = 'l', col = 'green', lwd = 3)
lines(quantiles, log_gamma_tail, type = 'l', col = 'orange', lwd = 3)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 3, col = c("red", "green", "orange"))
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "green", "orange"))
plot(quantiles,log_emp_tail, type = 'l', col = 'red', lwd = 2)
lines(quantiles, log_norm_tail, type = 'l', col = 'green', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "green", "orange"))
lines(quantiles, log_gamma_tail, type = 'l', col = 'orange', lwd = 2)
quantiles <- seq(from = 0.95, to = 0.9999, by = 0.0001)
# Empirical distribution quantiles
empirical_tail <- quantile(Sn_MC_samples, quantiles)
emp_tail <- 1-empirical_tail
# Normal Approximation
Sn_mean <- mean(Sn_MC_samples)
Sn_sd <- sd(Sn_MC_samples)
norm_tail_approx <- qnorm(quantiles, Sn_mean, Sn_sd)
norm_tail <- 1- norm_tail_approx
# Gamma tail approx ... Equations from the book - pg 477 of pdf
library(MASS)
gamma_params <- fitdistr(Sn_MC_samples, "gamma")
gamma_shape <- gamma_params$estimate[1]
gamma_rate <- gamma_params$estimate[2]
gamma_tail_approx <- qgamma(quantiles,shape = gamma_shape, rate = gamma_rate )
gamma_tail <- 1- gamma_tail_approx
# Plot on log log scale
plot(quantiles,emp_tail, log = "xy", type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'green', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "green", "orange"))
min(emp_tail)
emp_tail ==0
sum(emp_tail ==0)
log(0)
library(MASS)
gamma_params <- fitdistr(Sn_MC_samples, "gamma")
gamma_shape <- gamma_params$estimate[1]
gamma_rate <- gamma_params$estimate[2]
gamma_tail_approx <- qgamma(quantiles,shape = gamma_shape, rate = gamma_rate )
gamma_tail <- 1- gamma_tail_approx
# Plot on log log scale
plot(quantiles,emp_tail, log = "xy", type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'green', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "green", "orange"))
plot(quantiles,emp_tail, type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'green', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
X1 <- rpois(1000,9) # Generate random variable- try other random variables
EX1 <- mean(X1) # E[X] - first moment
VarX1 <- var(X1) # Variance = E[X^2] - E[X]^2
mean2 <- EX1^2 # E[X]^2
(EX2_hypo <- mean(X1^2) ) # E[X^2] ? hypothesis
(EX2_act <- VarX1 + mean2) # E[X^2] = Var(X) - E[X]^2
log(1)
# Approximating a compound poisson random variable
numb_sn <- 100000 # M
lambda <- 100 # Poisson process parameter
mu = 0.10 # Parameter for X
sigma = 0.4 # Parameter for X
# Begin approximating Sn
N_vector <- rpois(numb_sn, lambda)
# Compute a sample of Sn
Sn_sample <- function(N, mean = mu, std = sigma){
log_X_k <- rnorm(N, mean = mu, sd = sigma)
X_k <- exp(log_X_k)
Sn <- sum(X_k)
return (Sn)
}
# Pre allocate space
Sn_MC_samples <- rep(0, numb_sn)
# Compute M copies of Sn
for (sample in 1:numb_sn){
N_i <- N_vector[sample]
Sn_MC_samples[sample] <- Sn_sample(N_i, mu, sigma)
}
# Plot the distribution with a normal density overlaid
makeHist <- function(x, color = "blue", title = "Histogram"){
h<-hist(x,breaks = 100 ,main=title)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col=color, lwd=2)
}
makeHist(Sn_MC_samples)
####################### Quantile Stuff #############################
#################################################################
quantiles <- seq(from = 0.95, to = 0.9999, by = 0.0001)
# Empirical distribution quantiles
empirical_tail <- quantile(Sn_MC_samples, quantiles)
emp_tail <- 1-empirical_tail
# Normal Approximation
Sn_mean <- mean(Sn_MC_samples)
Sn_sd <- sd(Sn_MC_samples)
norm_tail_approx <- qnorm(quantiles, Sn_mean, Sn_sd)
norm_tail <- 1- norm_tail_approx
# Gamma tail approx ... Equations from the book - pg 477 of pdf
# This is not the 3 parameter gamma....
library(MASS)
gamma_params <- fitdistr(Sn_MC_samples, "gamma")
gamma_shape <- gamma_params$estimate[1]
gamma_rate <- gamma_params$estimate[2]
gamma_tail_approx <- qgamma(quantiles,shape = gamma_shape, rate = gamma_rate )
gamma_tail <- 1- gamma_tail_approx
# Need to plot on log log
# Plot on log log scale
plot(quantiles,emp_tail, log = "xy", type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'green', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "green", "orange"))
min(log(emp_tail))
sum(is.na(emp_tail))
plot(emp_tail)
log(min(emp_tail))
min(emp_tail)
log(-1)
plot(empirical_tail)
emp_tail <- empirical_tail
emp_tail <- empirical_tail # supposed to be 1-Fsn
norm_tail <- norm_tail_approx
plot(quantiles,emp_tail, log = "xy", type = 'l', col = 'red', lwd = 2)
norm_tail <- norm_tail_approx # Supposed to be 1-Fsn
gamma_tail <- gamma_tail_approx # Supposed to be 1- Fsn
# Need to plot on log log
# Plot on log log scale
plot(quantiles,emp_tail, log = "xy", type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'green', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "green", "orange"))
quantiles <- seq(from = 0.95, to = 0.9999, by = 0.0001)
# Empirical distribution quantiles
empirical_tail <- quantile(Sn_MC_samples, quantiles)
emp_tail <- 1 - empirical_tail
# Normal Approximation
Sn_mean <- mean(Sn_MC_samples)
Sn_sd <- sd(Sn_MC_samples)
norm_tail_approx <- qnorm(quantiles, Sn_mean, Sn_sd)
norm_tail <- 1- norm_tail_approx
# Gamma tail approx ... Equations from the book - pg 477 of pdf
# Or simplified equations on 497 in appendix
# This is not the 3 parameter gamma....
library(MASS)
gamma_params <- fitdistr(Sn_MC_samples, "gamma")
gamma_shape <- gamma_params$estimate[1]
gamma_rate <- gamma_params$estimate[2]
gamma_tail_approx <- qgamma(quantiles,shape = gamma_shape, rate = gamma_rate )
gamma_tail <- 1- gamma_tail_approx
# Need to plot on log log
# Plot on log log scale
# NOT ON LOG LOG SCALE
plot(quantiles,emp_tail, type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'green', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "green", "orange"))
plot(quantiles,emp_tail, type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'blue', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
plot(emp_tail, quantiles, type = 'l', col = 'red', lwd = 2)
lines(norm_tail, quantiles, type = 'l', col = 'blue', lwd = 2)
lines(gamma_tail, quantiles, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
plot(emp_tail, log(quantiles), type = 'l', col = 'red', lwd = 2)
lines(norm_tail, log(quantiles), type = 'l', col = 'blue', lwd = 2)
lines(gamma_tail, log(quantiles), type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
plot(emp_tail, quantiles, log = "y", type = 'l', col = 'red', lwd = 2)
plot(emp_tail, log(quantiles), log = "y", type = 'l', col = 'red', lwd = 2)
plot(emp_tail, quantiles, log = "y", type = 'l', col = 'red', lwd = 2)
plot(emp_tail, quantiles, log = "xy", type = 'l', col = 'red', lwd = 2)
plot(emp_tail, quantiles, type = 'l', col = 'red', lwd = 2)
lines(norm_tail, quantiles, type = 'l', col = 'blue', lwd = 2)
lines(gamma_tail, quantiles, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
qnorm(0.99)
qnorm(0.99)
qnorm(0.01)
exp(0.01)
# Approximating a compound poisson random variable
numb_sn <- 100000 # M
lambda <- 100 # Poisson process parameter
mu = 0.10 # Parameter for X
sigma = 0.4 # Parameter for X
# Begin approximating Sn
# Approximating a compound poisson random variable
numb_sn <- 100000 # M
lambda <- 100 # Poisson process parameter
mu = 0.10 # Parameter for X
sigma = 0.4 # Parameter for X
# Begin approximating Sn
N_vector <- rpois(numb_sn, lambda)
# Compute a sample of Sn
Sn_sample <- function(N, mean = mu, std = sigma){
log_X_k <- rnorm(N, mean = mu, sd = sigma)
X_k <- exp(log_X_k)
Sn <- sum(X_k)
return (Sn)
}
# Pre allocate space
Sn_MC_samples <- rep(0, numb_sn)
# Compute M copies of Sn
for (sample in 1:numb_sn){
N_i <- N_vector[sample]
Sn_MC_samples[sample] <- Sn_sample(N_i, mu, sigma)
}
# Plot the distribution with a normal density overlaid
makeHist <- function(x, color = "blue", title = "Histogram"){
h<-hist(x,breaks = 100 ,main=title)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col=color, lwd=2)
}
makeHist(Sn_MC_samples)
####################### Quantile Stuff #############################
#################################################################
quantiles <- seq(from = 0.95, to = 0.9999, by = 0.0001)
# Empirical distribution quantiles
empirical_tail <- quantile(Sn_MC_samples, quantiles)
emp_tail <- 1 - empirical_tail
# Normal Approximation quantiles
Sn_mean <- mean(Sn_MC_samples)
Sn_sd <- sd(Sn_MC_samples)
norm_tail_approx <- qnorm(quantiles, Sn_mean, Sn_sd)
norm_tail <- 1- norm_tail_approx
# Gamma tail approx ... Equations from the book - pg 477 of pdf
# Or simplified equations on 497 in appendix
# This is not the 3 parameter gamma....
# Find the parameters using MLE in the MASS package
library(MASS)
gamma_params <- fitdistr(Sn_MC_samples, "gamma")
gamma_shape <- gamma_params$estimate[1]
gamma_rate <- gamma_params$estimate[2]
# Compute the quantiles and find the tail distribution
gamma_tail_approx <- qgamma(quantiles,shape = gamma_shape, rate = gamma_rate )
gamma_tail <- 1- gamma_tail_approx
# Plot on log log scale
# NOT ON LOG LOG SCALE
plot(quantiles,emp_tail, type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'blue', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
# The approximations should not straddle the empirical distribution
# Plotting again to look more like his but same analytical problems
# Switch x and y axis
plot(emp_tail, quantiles, type = 'l', col = 'red', lwd = 2)
lines(norm_tail, quantiles, type = 'l', col = 'blue', lwd = 2)
lines(gamma_tail, quantiles, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
# Input the data
data <- read.csv("mf850-finalproject-data.csv")
summary(data)
# Seperate the response variable
RETMONTH <- data$RETMONTH
# Histogram for response
hist(RETMONTH, breaks = 60)
# Count how many returns are higher and lower
(re_up <- length(RETMONTH[RETMONTH < 0]))
(re_down <- length(RETMONTH[RETMONTH > 0]))
# Percentage of increases - Baseline
re_up / (re_up + re_down)
# Stop up down as new column vector
up_down <- ifelse(RETMONTH > 0, 1, 0)
# Determine how many unique predictors there are
# Function to measure number of unique elements in column
numb_unique <- function(x) {
uniques <- length(unique(x))
return (uniques)
}
# Apply number of unique function to all columns of the data set
uniqueness <- apply(data, 2, numb_unique)
# Count how many columns have less than 50 unique values (indicating they are categorical)
length(uniqueness[uniqueness < 50])
# Determine which variables should be categorical variables
which(uniqueness < 50)
# Already saw Industry has levels
# Establish plotting points - Last 1000 data points
n <- length(RETMONTH)
n_low <- n - 1000
# Plot last __ data points
plot(RETMONTH[n_low:n], type = "l", col = "red", lwd = 2)
abline(h = mean(RETMONTH[n_low:n]), col = "blue", lwd = 2)
# A priori MSE - squared error from the mean
MSE_i <- (RETMONTH[n_low:n] - mean(RETMONTH[n_low:n])) ^ 2
# MSE
(MSE <- mean(MSE_i))
# Take out industry, date, retmonth variables
industry <- data$Industry
date <- data$Date
data_no_ind <- data
data_no_ind$Industry <- NULL
data_no_ind$Date <- NULL
data_no_ind$RETMONTH <- NULL
# Scale data
data_no_ind <- scale(data_no_ind)
setwd("C:/Users/board/Desktop/Kaggle/Wine_Quality")
install.packages(data.table)
install.packages("data.table")
library(data.table)
train <- fread("winequality-red.csv")
dim(train)
train <- fread("winequality-white.csv")
dim(train)
str(train)
install.packages("h2o")
library(h2o)
h2o.int()
localH2O <- h2o.init(nthreads = -1)
train.h2o <- as.h2o(train)
colnames(train.h2o)
y.index <- 12
x.index <- c(1:11)
?h2o.glm
regression.model(y = y.index, x = x.index, training_frame = train, family = "gaussian")
regression.model <- h2o.glm(y = y.index, x = x.index, training_frame = train, family = "gaussian")
regression.model <- h2o.glm(y = y.index, x = x.index, training_frame = train.h2o, family = "gaussian")
h2o.performance(regression.model)
h2o.shutdown()
